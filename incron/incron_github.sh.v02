#!/bin/bash

# IN_ACCESS        File was accessed (read) (*)
# IN_ATTRIB        Metadata changed (permissions, timestamps, extended attributes, etc.) (*)
# IN_CLOSE_WRITE   File opened for writing was closed (*)
# IN_CLOSE_NOWRITE File not opened for writing was closed (*)
# IN_CREATE        File/directory created in watched directory (*)
# IN_DELETE        File/directory deleted from watched directory (*)
# IN_DELETE_SELF   Watched file/directory was itself deleted
# IN_MODIFY        File was modified (*)
# IN_MOVE_SELF     Watched file/directory was itself moved
# IN_MOVED_FROM    File moved out of watched directory (*)
# IN_MOVED_TO      File moved into watched directory (*)
# IN_OPEN          File was opened (*)


# $$ - a dollar sign
# $@ - the watched filesystem path (see above)
# $# - the event-related file name
# $% - the event flags (textually)
# $& - the event flags (numerically)

function main(){
	# Read switches for rapper script
	switches "$@"
	shift $?

	# Set log file
	LOG="/var/log/incron_test.log"

	# Set sleep between uploads
	SLEEP='1'

	# lock file to pevent multiple simultanios git push events
	inProgress=/tmp/$(basename "${BASH_SOURCE}")\-${rootPath//\//$'\\'}

	# main logic 
	if   ${echo_help:-false}; then
		echo_help
		exit 1
	fi

	${isdir} && exit 1

	# skip filters
	#[[ "${e_name}" =~ ^\..*\.swpx{0,1}$ ]]	&& exit 1
	#[[ "${e_name}" =~ ^\..*\.sw[xp]$ ]]	&& exit 1
	#[[ "${e_name}" =~ ^.*~$ ]]		&& exit 1
	#[[ "${e_name}" =~ ^[0-9]*$ ]]		&& exit 1

	#exit 1

	# exit if file doesn't need to be pushed
	#git_changepending || exit 1

	# add if file is new and not yet tracked
	#git_isuntracked && git_add

	# only push once every 30 seconds or
	# whatever the SLEEP variable is set to
	#for (( f=$(date "+%s") + SLEEP; f > n; n=$(date "+%s") )); do
		#sleep 1
		#git_changepending || exit 0
		#date >> "${LOG}"
		#sleep 2
	#done

	# stall while a git push is in progress
	#while [[ -e "${inProgress}" ]]; do
		#sleep 1
		#git_changepending || exit 0
		#echo holding... >> "${LOG}"
	#done

	# lock out other events from performing a git push 	
	#touch "${inProgress}"
	#git_commit
	#git_push
	#sleep 1
	#rm -f "${inProgress}"

	# log entry header
	cat << END-OF-LOG >> "${LOG}"
_________________________________________________
rootPath :: ${rootPath}
  e_FQFN :: ${e_FQFN}
-------------------------------------------------
END-OF-LOG
	( git_isexcluded    && echo ${e_name} is excluded    || echo ${e_name} is-not excluded ) >> "${LOG}"
	( git_isuntracked   && echo ${e_name} needs add      || echo ${e_name} is tracked ) >> "${LOG}"
	( git_changepending && echo ${e_name} change pending || echo ${e_name} no change pending ) >> "${LOG}"
	
	cat << END-OF-LOG >> "${LOG}"
-------------------------------------------------
END-OF-LOG
	echo inProgress :: ${inProgress} >> "${LOG}"

	cat << END-OF-LOG >> "${LOG}"
-------------------------------------------------
END-OF-LOG
	git_list_pending	| sed 's/^/pending\t\t/'	>> "${LOG}"
	git_list_untracked	| sed 's/^/untracked\t/'	>> "${LOG}"
	git_list_excluded	| sed 's/^/excluded\t/'		>> "${LOG}"

	return 0

	# log
	cat << END-OF-LOG >> "${LOG}"
-------------------------------------------------
events :: ${events}
e_FQFN :: ${e_FQFN}
isdir  :: ${isdir}
END-OF-LOG

}
function git_list_excluded(){
	git	--work-tree="${rootPath}"       \
                --git-dir="${rootPath}/.git"    \
		ls-files			\
		--others			\
		--ignored			\
		--exclude-standard		|\
		sed "s|^|${rootPath}/|"
}
function git_list_untracked(){
	git	--work-tree="${rootPath}"       	\
                --git-dir="${rootPath}/.git"    	\
		status				\
		--untracked-files			\
		--porcelain
}
function git_list_untracked_old(){
	git	--work-tree="${rootPath}"       	\
                --git-dir="${rootPath}/.git"    	\
		ls-files				\
		--others				\
		--exclude-standard			|\
		sed "s|^|${rootPath}/|"
}
function git_list_pending(){
	git	--work-tree="${rootPath}"       	\
                --git-dir="${rootPath}/.git"    	\
		log					\
		--name-only				\
		--pretty="format:"			\
		origin/master..master			|\
		sort -u					|\
		sed "s|^|${rootPath}/|"
}
function git_list_pending_old(){
	git	--work-tree="${rootPath}"       	\
                --git-dir="${rootPath}/.git"    	\
		ls-files				\
		--others				\
		--modified				\
		--deleted				\
		--exclude-standard			|\
		sed "s|^|${rootPath}/|"
}
function git_isexcluded(){
	git_list_excluded | egrep "^${e_FQFN}$" > /dev/null
}
function git_isuntracked(){
	git_list_untracked | egrep "^${e_FQFN}$" > /dev/null
}
function git_changepending(){
	git_list_pending | egrep "^${e_FQFN}$" > /dev/null
}

function git_add(){
	git	--work-tree="${rootPath}"       \
		--git-dir="${rootPath}/.git"    \
		add "${e_FQFN}"
}
function git_commit(){
	git	--work-tree="${rootPath}"       \
		--git-dir="${rootPath}/.git"    \
		#commit -a --allow-empty-message -m ''
		commit -a -m 'incron'
}
function git_push(){
	git	--work-tree="${rootPath}"       \
		--git-dir="${rootPath}/.git"    \
		push
}

function escape_path(){
	ls -1 -d --quoting-style=escape "${1}"
}
function switches(){
        local OPTIND=
        local OPTARG=
        while getopts "e:f:hr:" OPTION
               do case $OPTION in
			e)	events=${OPTARG}
				[[ "${events}" =~ IN_ISDIR       ]] && isdir=true      || isdir=false
				[[ "${events}" =~ IN_CREATE      ]] && e_create=true   || e_create=false
				[[ "${events}" =~ IN_DELETE      ]] && e_delete=true   || e_delete=false
				[[ "${events}" =~ IN_MODIFY      ]] && e_modify=true   || e_modify=false
				[[ "${events}" =~ IN_CLOSE_WRITE ]] && e_modified=true || e_modified=false
				;;
			f)	e_FQFN=${OPTARG}
				e_FQFNEscaped=$(escape_path "${e_FQFN}")
				e_path=$(dirname  "${e_FQFN}")
				e_name=$(basename "${e_FQFN}")
				;;
			h)	echo_help=true;;
			r)	rootPath=${OPTARG}
				rootPathEscaped=$(escape_path "${rootPath}")
				;;
                        ?)      ;;
                esac
        done
        return $(($OPTIND - 1))
}
function echo_help(){
	cat << END-OF-HELP
---------------------------------------------------------------
# IN_ACCESS        File was accessed (read) (*)
# IN_ATTRIB        Metadata changed (permissions, timestamps, extended attributes, etc.) (*)
# IN_CLOSE_WRITE   File opened for writing was closed (*)
# IN_CLOSE_NOWRITE File not opened for writing was closed (*)
# IN_CREATE        File/directory created in watched directory (*)
# IN_DELETE        File/directory deleted from watched directory (*)
# IN_DELETE_SELF   Watched file/directory was itself deleted
# IN_MODIFY        File was modified (*)
# IN_MOVE_SELF     Watched file/directory was itself moved
# IN_MOVED_FROM    File moved out of watched directory (*)
# IN_MOVED_TO      File moved into watched directory (*)
# IN_OPEN          File was opened (*)

# \$$ - a dollar sign
# \$@ - the watched filesystem path (see above)
# \$# - the event-related file name
# \$% - the event flags (textually)
# \$& - the event flags (numerically)
---------------------------------------------------------------
SWITCHES

 -h  this help message
 -e  [events (texual \$%)]
 -f  [absoluet event path (\$@/\$#)]
 -r  [absolute root path]

Incron Entry

 /full/path/to/git/root IN_DELETE,IN_CLOSE_WRITE /etc/incron.s/incron_github.sh -r /full/path/to/git/root -e \$% -f \$@/\$#

Incronr Setup Command

 incronr.sh -b -c [full path to incron config file]

END-OF-HELP
}
main "$@"
