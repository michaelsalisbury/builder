#!/bin/bash

function main(){
	# Read switches for rapper script
	switches "$@"
	shift $?

	# Set global variables
	incronRapperFQFN=$(readlink -nf "$BASH_SOURCE")
	incronRapperEscaped=$(ls -1 -d --quoting-style=escape "${incronRapperFQFN}")
	incronRapperName=$(basename "$incronRapperFQFN")
	incronRapperPath=$(dirname  "$incronRapperFQFN")



	if ${recursive:-false}; then
		process_recursive_tree_entry "$@"

	elif ${build:-false}; then
		build_recursive_tree_confs "$@"
	else
		if [ -e "$1" ]; then
			cmdFQFN=$(readlink -fn "$1") && shift
			cmdName=$(basename "$cmdFQFN")
			cmdPath=$(dirname  "$cmdFQFN")

			${first_run:-true} && setup_recursive_tree_entries
			/bin/bash "${cmdFQFN}" "$@"

		fi
	fi
}
###########################################################################################
###########################################################################################
function escape_path(){ ls -1 -d --quoting-style=escape "${1}"; }

function set_recursive_conf_paths(){
	#recursiveMON="${incronPath}/recursive-${rootPathEscaped//\//$'\\\\'}-MON.conf"
	#recursiveCMD="${incronPath}/recursive-${rootPathEscaped//\//$'\\\\'}-CMD.conf"
	recursiveMON="${incronPath}/${incronConf}-recursiveMON.conf"
	recursiveCMD="${incronPath}/${incronConf}-recursiveCMD.conf"
}
function del_MON_Entry(){
	sed -i "\|^${recursiveTreePathEscaped//\\/$'\\\\\\\\'} IN_|d" "${recursiveMON}"
}
function del_CMD_Entry(){
	sed -i "\|^${recursiveTreePathEscaped//\\/$'\\\\\\\\'} IN_|d" "${recursiveCMD}"
}
function add_MON_Entry(){
	echo	"${recursiveTreePathEscaped}"	\
		IN_CREATE,IN_DELETE		\
		${incronRapperEscaped}		\
		-r "${rootPathEscaped}"		\
		-c "${incronFQFNEscaped}"	\
		\$% \$@/\$#			\
	>> "${recursiveMON}"
}



function process_recursive_tree_entry(){
	[[ "$1" =~ IN_ISDIR ]] || return 0

	# Process input passed from calling function
	local recursiveTreeEvent=$1
	shift
	recursiveTreePath=$@
	recursiveTreePathEscaped=$(escape_path "${recursiveTreePath}")

	#
	#local IFS=':'
	#local -a eventConf=( $(
	#	egrep -m1 "^${rootPathEscaped//\\/$'\\\\\\\\'}" "$incronFQFN" | \
	#	sed 's/ \(IN_[^ ]*\) /:\1:/'
	#	) )
	#unset IFS
	

	del_MON_Entry
	del_CMD_Entry

	if [[ "${recursiveTreeEvent}" =~ IN_CREATE ]]; then
		add_MON_Entry
		#add_CMD_Entry
	fi
	
	cat << END-OF-LOG >> /var/log/incron_test.log
RECURSIVE #>    incronFQFN  :: ${incronFQFN}
RECURSIVE #>    incronFQFNE :: ${incronFQFNEscaped}
RECURSIVE #>    incronPath  :: ${incronPath}
RECURSIVE #    recursiveCMD :: ${recursiveCMD}
RECURSIVE #>   recursiveMON :: ${recursiveMON}

RECURSIVE #>  recursiveTreeEvent :: ${recursiveTreeEvent}
RECURSIVE #>  recursiveTreePath  :: ${recursiveTreePath}
RECURSIVE #>  recursiveTreePathE :: ${recursiveTreePathEscaped}

RECURSIVE #>  eventConf :: ${eventConf[@]:1}

END-OF-LOG

}
function build_recursive_tree_confs(){
	[ -f "${incronFQFN}" ] || exit 1

	rm -f "${recursiveMON}"
	rm -f "${recursiveCMD}"

	local IFS=':'
	while read -a eventConf; do
		rootPath=${eventConf[0]}
		[ -d "${rootPath}" ] || continue
		rootPathEscaped=$(escape_path "${rootPath}")
		[[ ${rootPathEscaped}/ =~ ^${lastPathEscaped:-/dev/null}/ ]] && continue
		lastPathEscaped=${rootPathEscaped}

		while read recursiveTreePathEscaped; do
			process_recursive_tree_entry IN_CREATE,IN_ISDIR ${recursiveTreePathEscaped}

			#add_MON_Entry

			
			cat << END-OF-LOG >> /var/log/incron_test.log
recursiveTreePathEscaped :: ${recursiveTreePathEscaped}
$(
	while read -a eventConf; do
		rootPath=${eventConf[0]}
		[ -d "${rootPath}" ] || continue
		rootPathEscaped=$(escape_path "${rootPath}")
		echo BEFORE :: ${rootPathEscaped}
		[[ "${recursiveTreePathEscaped}"/ =~ ^"${rootPathEscaped:-/dev/null}"/ ]] || continue
		echo AFTER  :: ${rootPathEscaped}
		

	done < <( sort -r "${incronFQFN}" | sed '/^\(#\|$\)/d;s/ \(IN_[^ ]*\) /:\1:/')
)

END-OF-LOG




		done < <(
			find "${rootPath}" -type d -exec	  \
			ls -1 -d --quoting-style=escape {} \;	| \
			sed 's/\\/\\\\/g'			| \
			sort)

		cat << END-OF-LOG >> /var/log/incron_test.log
 rootPath        :: ${rootPath}
END-OF-LOG

	done < <( sort -r "${incronFQFN}" | sed '/^\(#\|$\)/d;s/ \(IN_[^ ]*\) /:\1:/')
	unset IFS


}

function setup_recursive_tree_entries(){
	local cmdFQFNEscaped=$(escape_path "${cmdFQFN}")

	local IFS=':'
	declare -a incronConf=( $(
			tac /var/log/syslog					| \
			egrep -m1 "incrond\[[0-9]*]:.*CMD..${cmdFQFNEscaped//\\/$'\\\\\\\\'}"	| \
			sed 's/^[^(]*(\([^:]*\)::\([^)]*\)).*/\2:\1/'
		) )

	case ${incronConf[1]} in
		system)	incronPath="/etc/incron.d";;
	esac

	###########################################################################

	incronFQFN="${incronPath}/${incronConf}"
	incronFQFNEscaped=$(escape_path "${incronFQFN}")

	local -a eventConf=( $(
		egrep -m1 "${cmdFQFNEscaped//\\/$'\\\\\\\\'}" "${incronFQFN}" | \
		sed 's/ \(IN_[^ ]*\) /:\1:/'
		) )

	unset IFS
	
	rootPath=$(eval ls -1 -d ${eventConf[0]})
	rootPathEscaped=${eventConf[0]}

	###########################################################################
	
	set_recursive_conf_paths

	while read recursiveTreePathEscaped; do add_MON_Entry; done < <(
		find "${rootPath}" -type d -exec	  \
		ls -1 -d --quoting-style=escape {} \;	| \
		sed 's/\\/\\\\/g'			| \
		sort)


	cat << END-OF-LOG >> /var/log/incron_test.log
      cmdFQFN  :: ${cmdFQFN}
      cmdFQFNE :: ${cmdFQFNEscaped} 

num incronFQFN :: ${#incronFQFN[@]}
    incronFQFN :: 0 - ${incronFQFN[0]}
    incronFQFN :: 1 - ${incronFQFN[1]}

num eventConf :: ${#eventConf[@]}
    eventConf :: 0 - ${eventConf[0]}
    eventConf :: 1 - ${eventConf[1]}
    eventConf :: 2 - ${eventConf[2]}

 recursiveCMD :: ${recursiveCMD}
 recursiveMON :: ${recursiveMON}
END-OF-LOG

}

#$(find "${rootPathEscaped//\\/}" -type d -exec ls -1 -d --quoting-style=escape {} \; | sort)
#$(tac /var/log/syslog | egrep -m1 "incrond\[[0-9]*]:.*CMD..${cmdFQFNEscaped//\\/$'\\\\\\\\'}")
#$(find ${eventConf[0]} -type d -exec ls -1 -d --quoting-style=escape {} \; | sort)

###########################################################################################
###########################################################################################
function switches(){
        local OPTIND=
        local OPTARG=
        while getopts "c:bhr:" OPTION
               do case $OPTION in
			h)      echo_help; exit 1;;
			b)	build=true;;
			s)	first_run=false;;
			c)	incronFQFN=$OPTARG
				incronConf=$(basename "${incronFQFN}")
				incronPath=$(dirname  "${incronFQFN}")
				incronFQFNEscaped=$(escape_path "${incronFQFN}")
				set_recursive_conf_paths
				;;
			r)	recursive=true
				rootPath=$OPTARG
				rootPathEscaped=$(escape_path "${rootPath}");;
                        ?)      ;;
                esac
        done
        return $(($OPTIND - 1))
}
function echo_help(){
	cat << END-OF-HELP
---------------------------------------------------------------
-v "regex filter for package version"
-e "extend the search text and decrement till a match is found"
---------------------------------------------------------------
USAGE
apt_search [-v "filter"] [-e "extended package name"] "package name"
END-OF-HELP
}
function echo_switches(){
	echo -----------------------------------------
	echo "$@"
	echo 1 :: "$1"
	echo 2 :: "$2"
	echo 3 :: "$3"
	echo 4 :: "$4"
	echo 5 :: "$5"
	echo 6 :: "$6"
	echo 7 :: "$7"
	echo 8 :: "$8"
	echo 9 :: "$9"
	echo -----------------------------------------
}
###########################################################################################
###########################################################################################
main "$@"

