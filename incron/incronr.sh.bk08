#!/bin/bash

function main(){
	# Read switches for rapper script
	switches "$@"
	shift $?

	# Set global variables
	incronRapperFQFN=$(readlink -nf "$BASH_SOURCE")
	incronRapperEscaped=$(ls -1 -d --quoting-style=escape "${incronRapperFQFN}")
	incronRapperName=$(basename "$incronRapperFQFN")
	incronRapperPath=$(dirname  "$incronRapperFQFN")



	if ${recursive:-false}; then
		process_recursive_tree_entry "$@"

	elif ${disable:-false}; then
		disable_recursive_tree_confs

	elif ${build:-false}; then
		build_recursive_tree_confs "$@"

	else
		if [ -e "$1" ]; then
			cmdFQFN=$(readlink -fn "$1") && shift
			cmdName=$(basename "$cmdFQFN")
			cmdPath=$(dirname  "$cmdFQFN")

			#${first_run:-true} && setup_recursive_tree_entries
			/bin/bash "${cmdFQFN}" "$@"

		fi
	fi
}
###########################################################################################
###########################################################################################
function escape_path(){
	ls -1 -d --quoting-style=escape "${1}"
}
function set_recursive_conf_paths(){
	recursiveMON="${incronPath}/${incronConf}-recursiveMON.conf"
	recursiveCMD="${incronPath}/${incronConf}-recursiveCMD.conf"
}
function del_MON_Entry(){
	sed -i "\|^${recursiveTreePathEscaped//\\/$'\\\\\\\\'} IN_|d" "${recursiveMON}"
}
function del_CMD_Entry(){
	sed -i "\|^${recursiveTreePathEscaped//\\/$'\\\\\\\\'} IN_|d" "${recursiveCMD}"
}
function add_MON_Entry(){
	echo	"${recursiveTreePathEscaped}"	\
		IN_CREATE,IN_DELETE		\
		"${incronRapperEscaped}"	\
		-c "${incronFQFNEscaped}"	\
		-r				\
		\$% \$@/\$#			\
	>> "${recursiveMON}"
		#-r "${rootPathEscaped}"		\
}
function process_recursive_tree_entry(){
	[[ "$1" =~ IN_ISDIR ]] || return 0

	# Process input passed from calling function
	local recursiveTreeEvent=$1
	shift
	recursiveTreePath=$@
	recursiveTreePathEscaped=$(escape_path "${recursiveTreePath}")

	del_MON_Entry
	del_CMD_Entry

	cat << END-OF-LOG >> /var/log/incron_test.log
RECURSIVE #>  recursiveTreePath  :: ${recursiveTreePath}
END-OF-LOG

	if [[ "${recursiveTreeEvent}" =~ IN_CREATE ]]; then
		add_MON_Entry
		#add_CMD_Entry


		


		local IFS=':'
		while read rootPath eventConf; do
			[ -d "${rootPath}" ] || continue
			rootPathEscaped=$(escape_path "${rootPath}")
			[[ "${recursiveTreePathEscaped}"/ =~ ^"${rootPathEscaped:-/dev/null}"/ ]] || continue
			
			sed "s|^${rootPathEscaped//\\/$'\\\\\\\\'}\([\ \t]*IN_\)|${recursiveTreePathEscaped//\\/$'\\\\\\\\'}\1|p;d" \
				"${incronFQFN}" >> "${recursiveCMD}"

		done < <(	sort -r "${incronFQFN}" | \
				sed '/^\(#\|$\)/d;s/[\ \t]*\(IN_[^\ \t]*\)/:\1/'
			)
		unset IFS
	fi
	

}
function disable_recursive_tree_confs(){
	[ -f "${incronFQFN}" ] || exit 1

	rm -f "${recursiveMON}"
	rm -f "${recursiveCMD}"
}
function   build_recursive_tree_confs(){
	[ -f "${incronFQFN}" ] || exit 1

	rm -f "${recursiveMON}"
	rm -f "${recursiveCMD}"

	touch "${recursiveMON}"
	touch "${recursiveCMD}"

	local IFS=':'
	while read -a eventConf; do
		rootPath=${eventConf[0]}
		[ -d "${rootPath}" ] || continue
		rootPathEscaped=$(escape_path "${rootPath}")
		[[ ${rootPathEscaped}/ =~ ^${lastPathEscaped:-/dev/null}/ ]] && continue
		lastPathEscaped=${rootPathEscaped}

		while read recursiveTreePathEscaped; do
			process_recursive_tree_entry IN_CREATE,IN_ISDIR ${recursiveTreePathEscaped}

		done < <(	find "${rootPath}" -type d -exec	  \
				ls -1 -d --quoting-style=escape {} \;	| \
				sort
			)

	done < <(	sort -r "${incronFQFN}" | \
			sed '/^\(#\|$\)/d;s/ \(IN_[^ ]*\) /:\1:/'
		)
	unset IFS
}

function setup_recursive_tree_entries(){
	local cmdFQFNEscaped=$(escape_path "${cmdFQFN}")

	local IFS=':'
	declare -a incronConf=( $(
			tac /var/log/syslog					| \
			egrep -m1 "incrond\[[0-9]*]:.*CMD..${cmdFQFNEscaped//\\/$'\\\\\\\\'}"	| \
			sed 's/^[^(]*(\([^:]*\)::\([^)]*\)).*/\2:\1/'
		) )

	case ${incronConf[1]} in
		system)	incronPath="/etc/incron.d";;
	esac

	###########################################################################

	incronFQFN="${incronPath}/${incronConf}"
	incronFQFNEscaped=$(escape_path "${incronFQFN}")

	local -a eventConf=( $(
		egrep -m1 "${cmdFQFNEscaped//\\/$'\\\\\\\\'}" "${incronFQFN}" | \
		sed 's/ \(IN_[^ ]*\) /:\1:/'
		) )

	unset IFS
	
	rootPath=$(eval ls -1 -d ${eventConf[0]})
	rootPathEscaped=${eventConf[0]}

	###########################################################################
	
	set_recursive_conf_paths

	while read recursiveTreePathEscaped; do add_MON_Entry; done < <(
		find "${rootPath}" -type d -exec	  \
		ls -1 -d --quoting-style=escape {} \;	| \
		sed 's/\\/\\\\/g'			| \
		sort)


	cat << END-OF-LOG >> /var/log/incron_test.log
      cmdFQFN  :: ${cmdFQFN}
      cmdFQFNE :: ${cmdFQFNEscaped} 

num incronFQFN :: ${#incronFQFN[@]}
    incronFQFN :: 0 - ${incronFQFN[0]}
    incronFQFN :: 1 - ${incronFQFN[1]}

num eventConf :: ${#eventConf[@]}
    eventConf :: 0 - ${eventConf[0]}
    eventConf :: 1 - ${eventConf[1]}
    eventConf :: 2 - ${eventConf[2]}

 recursiveCMD :: ${recursiveCMD}
 recursiveMON :: ${recursiveMON}
END-OF-LOG

}

#$(find "${rootPathEscaped//\\/}" -type d -exec ls -1 -d --quoting-style=escape {} \; | sort)
#$(tac /var/log/syslog | egrep -m1 "incrond\[[0-9]*]:.*CMD..${cmdFQFNEscaped//\\/$'\\\\\\\\'}")
#$(find ${eventConf[0]} -type d -exec ls -1 -d --quoting-style=escape {} \; | sort)

###########################################################################################
###########################################################################################
function switches(){
        local OPTIND=
        local OPTARG=
        while getopts "bc:dehr" OPTION
               do case $OPTION in
			b)	build=true;;
			c)	incronFQFN=$OPTARG
				incronConf=$(basename "${incronFQFN}")
				incronPath=$(dirname  "${incronFQFN}")
				incronFQFNEscaped=$(escape_path "${incronFQFN}")
				set_recursive_conf_paths;;
			d)	disable=true;;
			e)	build=true;;
			h)      echo_help; exit 1;;
			r)	recursive=true;;
				#rootPath=$OPTARG
				#rootPathEscaped=$(escape_path "${rootPath}");;
                        ?)      ;;
                esac
        done
        return $(($OPTIND - 1))
}
function echo_help(){
	cat << END-OF-HELP
---------------------------------------------------------------
# IN_ACCESS        File was accessed (read) (*)
# IN_ATTRIB        Metadata changed (permissions, timestamps, extended attributes, etc.) (*)
# IN_CLOSE_WRITE   File opened for writing was closed (*)
# IN_CLOSE_NOWRITE File not opened for writing was closed (*)
# IN_CREATE        File/directory created in watched directory (*)
# IN_DELETE        File/directory deleted from watched directory (*)
# IN_DELETE_SELF   Watched file/directory was itself deleted
# IN_MODIFY        File was modified (*)
# IN_MOVE_SELF     Watched file/directory was itself moved
# IN_MOVED_FROM    File moved out of watched directory (*)
# IN_MOVED_TO      File moved into watched directory (*)
# IN_OPEN          File was opened (*)

# \$$ - a dollar sign
# \$@ - the watched filesystem path (see above)
# \$# - the event-related file name
# \$% - the event flags (textually)
# \$& - the event flags (numerically)
---------------------------------------------------------------
SWITCHES

 -h  this help message
 -b  rebuild the recursive config files (requires -c)
 -c  [full path to incron config file]
 -r  process a recursive event (requires -c & event type & path)

USAGE (ENABLE)
${incronRapperName} -(b|e) -c [full path to incron config file]

USAGE (Disable
${incronRapperName} -d -c [full path to incron config file]

END-OF-HELP
}
###########################################################################################
###########################################################################################
main "$@"

