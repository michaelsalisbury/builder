#!/bin/bash
#https://wiki.archlinux.org/index.php/X11vnc
LOG=/var/log/x11vnc.dynamic
DISPLAY_FILE=".vnc/displays"
touch "${LOG}"

function GET_ALLOWED_USERS(){
	local name=""
	for name in "$@"; do
		# if name is a username then add to list
		grep -q "^${name}:" /etc/passwd &> /dev/null && echo ${name}
		# parse groups for match and list users	
		cat <<-AWK | awk -F: -f <(cat) /etc/group
			\$1=="${name}" {
				gsub(" ","",\$4)	# remove all whitespace
				sub(/^,*/,"",\$4)	# remove leading commas
				sub(/,*\$/,"",\$4)	# remove trailing commas
				gsub(",","\n",\$4)	# sub commas for newlines
				if(\$4=="")exit		# exit if no users in group
				print \$4
				exit
			}
		AWK
	done
}
function DISPLAYS_NEW(){
	local username="$1"
	local homedir=$(GET_USER_HOMEDIR "${username}")
	local displays="${homedir}/${DISPLAY_FILE}"
	cat <<-SU | su ${username} -s /bin/bash
		touch     "${displays}"
		chmod 600 "${displays}"
	SU
}
function GET_USER_HOMEDIR(){
	local username="$1"
	awk -F: -v USER=${username} '$1==USER{printf $6}' /etc/passwd
}
function DISPLAYS_NEW_PORT(){
	local username="$1"
	local port="$2"
	local homedir=$(GET_USER_HOMEDIR "${username}")
	local displays="${homedir}/${DISPLAY_FILE}"
	# setup file if missing
	[ ! -f "${displays}" ] && DISPLAYS_NEW "${username}"
	# append new port entry to the end of file
	! grep -q "^\[${port}]" "${displays}" && echo "[${port}]" >> "${displays}"
}
function DISPLAYS_READ_KEYS(){
	local username="$1"
	local port="$2"
	local homedir=$(GET_USER_HOMEDIR "${username}")
	local displays="${homedir}/${DISPLAY_FILE}"
	# setup file if missing
	[ ! -f "${displays}" ] && DISPLAYS_SETUP_DEFAULTS ${username} ${port}
	# if port entry is missing 
	! grep -q "^\[${port}]" "${displays}" && DISPLAYS_SETUP_DEFAULTS ${username} ${port}
	# read entry values
	source <(
		cat <<-SED | sed -n -f <(cat) "${displays}"
			/^\[${port}]/,/^\[/{
				/^[^\[]/p
			}
		SED
	)
}
function DISPLAYS_SETUP_DEFAULTS(){
	local username="$1"
	local port="$2"
	local homedir=$(GET_USER_HOMEDIR "${username}")
	local displays="${homedir}/${DISPLAY_FILE}"
	# setup file if missing
	[ ! -f "${displays}" ] && DISPLAYS_NEW "${username}"
	# if port entry is missing
	! grep -q "^\[${port}]" "${displays}" && DISPLAYS_NEW_PORT ${username} ${port}
	# setup default key value pairs
	local vncPID='0'
	local rfbport='0'
	local vncDisplay='0'
	local resolution='1024x768'
	local depth='16'
	local desktop='gnome'
	local name="none"
	local key=""
	# write key value pairs
	for key in vncPID rfbport display resolution depth desktop name; do
		DISPLAYS_WRITE_KEY ${username} ${port} ${key}
	done
	# remove any blank lines
	cat <<-SED | sed -i -f <(cat) "${displays}"
		/^\[${port}]/,/^\[/{
			 /^$/d
		}
	SED
}
function DISPLAYS_WRITE_KEY(){
	local username="$1"
	local port="$2"
	local key="$3"
	local value=${!key}
	local homedir=$(GET_USER_HOMEDIR "${username}")
	local displays="${homedir}/${DISPLAY_FILE}"
	# setup file if missing
	[ ! -f "${displays}" ] && DISPLAYS_NEW "${username}"
	# if port entry is missing
	! grep -q "^\[${port}]" "${displays}" && DISPLAYS_NEW_PORT ${username} ${port}
	# test if key value pair exists then edit
	if cat <<-SED | sed -f <(cat) "${displays}" | grep -q ""; then
			/^\[${port}]/,/^\[/{
				/^[[:space:]]*${key}=/p
			}
			d
		SED
		cat <<-SED | sed -i -f <(cat) "${displays}"
			/^\[${port}]/,/^\[/{
				/^[[:space:]]*${key}=/{
					s/=.*/=${value}/
				}
			}
		SED
	# if the keyvalue pair does not exist then append to the end of the entries
	elif cat <<-SED | sed -f <(cat) "${displays}" | grep -q ""; then
			/^\[${port}]/,/^\[/{
				/^\[${port}]/d
				/^\[/p
			}
			d
		SED
		cat <<-SED | sed -i -f <(cat) "${displays}"
			/^\[${port}]/,/^\[/{
				/^\[${port}]/b
				/^\[/i\\\t${key}=${value}
			}
		SED
	else
		cat <<-SED | sed -i -f <(cat) "${displays}"
			/^\[${port}]/,/^\[/{
				\$a\\\t${key}=${value}
			}
		SED
	fi
}


function GET_PROCESS_SOCKETS(){
	local process=$1
	local ocket='\([0-9\.]\+:[0-9]\+\)'	# sed socket filter
	local p='[[:space:]]'			# sed white space key
	ss -np | sed "/,${process},/s/.*$p$ocket$p*$ocket$p.*/\1 \2/p;d"
}
function GET_PROCESS_DST_IP(){
	local process=$1
	local -a sockets=( `GET_PROCESS_SOCKETS ${process}` )
	echo ${sockets[0]%:*}
}
function GET_PROCESS_SRC_IP(){
	local process=$1
	local -a sockets=( `GET_PROCESS_SOCKETS ${process}` )
	echo ${sockets[1]%:*}
}
function GET_PROCESS_DST_PORT(){
	local process=$1
	local -a sockets=( `GET_PROCESS_SOCKETS ${process}` )
	echo ${sockets[0]#*:}
}
function GET_PROCESS_SRC_PORT(){
	local process=$1
	local -a sockets=( `GET_PROCESS_SOCKETS ${process}` )
	echo ${sockets[1]#*:}
}
function GET_PROCESS_SRC_PID(){
	local process=$1
	local g='[[:graph:]]'			# sed graph key
	local p='[[:space:]]'			# sed white space key
	local -a sockets=( `GET_PROCESS_SOCKETS ${process}` )
	cat <<-SED | sed -n -f <(cat) <(ss -n -p src ${sockets[1]})
		s/.*${p}\+users:(("${g}\+",\([0-9]*\),.*/\1/p
	SED
}
function GET_PROCESS_SRC_UID(){
	local process=$1
	local srcPID=$(GET_PROCESS_SRC_PID ${process})
	ps --no-heading -o uid -p ${srcPID}
}
function GET_PROCESS_SRC_USER(){
	local process=$1
	local srcPID=$(GET_PROCESS_SRC_PID ${process})
	ps --no-heading -o user -p ${srcPID}
}
function GET_PROCESS_SRC_PPID(){
	local process=$1
	local srcPID=$(GET_PROCESS_SRC_PID ${process})
	ps --no-heading -o ppid -p ${srcPID}
}
function IS_DISPLAY_OPEN(){
	local username=$1
	local vncPID=$2
	local display=$3
	local homedir=$(GET_USER_HOMEDIR "${username}")
	local vncPID_file="${homedir}/.vnc/$(hostname):${display}.pid"
	[ ! -f "${vncPID_file}" ] && return 1
	(( $(cat "${vncPID_file}") == vncPID ))\
		&& return 0\
		|| return 1
}
function GET_FREE_LISTENING_PORT(){
	cat <<-PYTHON | python <(cat)
		import socket
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		s.bind(("127.0.0.1", 0))
		s.listen(1)
		ipaddr, port = s.getsockname()
		print port
	PYTHON
}
function SET_vncPID(){
	local username=$1
	local port=$2
	# if no listening port with process command Xvnc then fail
	grep -q "127.0.0.1:${rfbport}.*Xvnc" <(ss -atnp) || return 1
	# get vncPID 
	vncPID=$(	
		cat <<-SED | sed -n -f <(cat) <(ss -atnp)
			/127.0.0.1:${rfbport}/{
				s/[()\"[:space:]]\+//g
				s/.*Xvnc,\([0-9]*\),.*/\1/p
			}
		SED
	)
	# write vncPID key to display file
	DISPLAYS_WRITE_KEY ${username} ${port} vncPID
}
function SET_vncDisplay(){
	local username=$1
	local port=$2
	local homedir=$(GET_USER_HOMEDIR "${username}")
	# if pid file missing then fail
	grep -q "${vncPID}" "${homedir}"/.vnc/*.pid || return 1
	# get vncDisplay
	local vncPID_file=$(grep -l "${vncPID}" "${homedir}"/.vnc/*.pid)
	vncDisplay=$(basename "${vncPID_file}" .pid)
	vncDisplay=${vncDisplay#*:}
	# write vncDisplay key to display file
	DISPLAYS_WRITE_KEY ${username} ${port} vncDisplay
}



function main(){
	echo -------------------------------------------------------- `date "+%Y.%m.%d-%T"`
	
	echo ___GET :: ____ source USER :: `GET_PROCESS_SRC_USER $$`
	echo ___GET :: ____ source PID_ :: `GET_PROCESS_SRC_PID $$`
	echo ___GET :: ____ source PORT :: `GET_PROCESS_SRC_PORT $$`
	echo ___GET :: destination PORT :: `GET_PROCESS_DST_PORT $$`

	# get connecting username
	local srcUSER=$(GET_PROCESS_SRC_USER $$)

	# test if connecting user was not on the allowed_users array list
	if ! GET_ALLOWED_USERS "$@" | grep -q "^${srcUSER}$"; then
		ERROR_MSG User [${srcUSER}] tried to VNC via $'\('${srcIP}:${srcPORT}$')'. &
		echo EXITING\!\!\! User \"${srcUSER}\" tried to\
			VNC via $'('${srcIP}:${srcPORT}$')'.
	fi

	# load last known display port details (bewaire; these will be global)
	DISPLAYS_READ_KEYS `GET_PROCESS_SRC_USER $$` `GET_PROCESS_DST_PORT $$`

	# test to see if display is still open
	if IS_DISPLAY_OPEN `GET_PROCESS_SRC_USER $$` ${vncPID} ${vncDisplay}; then
		# connect to current display
		echo JUMP :: Display already open.
		return 0
	fi

	# generate randome port number to create vncserver display
	rfbport=$(GET_FREE_LISTENING_PORT)

	# write new port number to displays file
	DISPLAYS_WRITE_KEY `GET_PROCESS_SRC_USER $$` `GET_PROCESS_DST_PORT $$` rfbport	


	# echo last known display port details 
	echo GLOBAL :: __________ ::
	echo GLOBAL :: __ rfbport :: ${rfbport}
        echo GLOBAL :: resolution :: ${resolution}
        echo GLOBAL :: ____ depth :: ${depth}
        echo GLOBAL :: __ desktop :: ${desktop}

	# setup vncserver display port
	cat <<-END-OF-VNCSERVER-SETUP | su ${srcUSER} -s /bin/bash
		/usr/bin/vncserver		\
			-autokill		\
			-SecurityTypes None	\
			-localhost		\
			-httpPort 0		\
			-nolisten tcp		\
			-rfbport ${rfbport} 2>&1
	END-OF-VNCSERVER-SETUP

			#-name ${desktop}	\
			#-geometry 1024x768	\
			#-depth 16		\

	SET_vncPID     `GET_PROCESS_SRC_USER $$` `GET_PROCESS_DST_PORT $$`\
	|| { echo ERROR :: SET_vncPID failed.; return 1; }
	SET_vncDisplay `GET_PROCESS_SRC_USER $$` `GET_PROCESS_DST_PORT $$`\
	|| { echo ERROR :: SET_vncDisplay failed.; return 1; }

	# echo last two vncserver details after setup
	echo GLOBAL :: __________ ::
	echo GLOBAL :: ___ vncPID :: ${vncPID}
        echo GLOBAL :: vncDisplay :: ${vncDisplay}

	return 0
}
function ERROR_MSG(){
	local dlgTEXT="$@"
	local user_logged_into_DISPLAY0=$(who -u | awk '/tty7.*\(:0/{print $1}')
	local dlgOPTS=(
		--error
		--timeout=15
		--title=\"Remote user attempting connection: ALLERT\"
		--text=\"${dlgTEXT}\"
	)
	/bin/su ${user_logged_into_DISPLAY0} -c "DISPLAY=:0 zenity ${dlgOPTS[*]}"
	echo ERROR_MSG :: returned $? :: ${dlgTEXT}
}

function testPIPE(){
	local PORT=$1
	cat | /usr/bin/nc 127.0.0.1 ${PORT} &
	local ncPID=$!
	(	echo netcatPID :: ${ncPID}
		echo Xvnc PORT :: ${PORT}
	) >> "${LOG}"
}
#main "$@" 2>&1 >> "${LOG}"
main "$@" >> "${LOG}"

#cat | testPIPE ${rfbport}
#cat | testPIPE 36354

cat | /usr/bin/nc 127.0.0.1 ${rfbport}

exit 0

