#!/bin/bash

whitesp="                                                             "

function color(){

	local color=$(echo $1 | tr A-Z a-z)
	shift 1
	local text=$(echo $@)

	[ "${color:0:1}" == "u" ] && {
		local underline="true"
		          color=${color:1}
	}

	case ${color} in
	black)		color='30m';;
        blue)		color='34m';;
        brown)		color='33m';;
        cyan)		color='36m';;
        darkbrown)	color='1;33m';;
	darkgray)	color='1;30m';;
        green)		color='32m';;
        lightblue)	color='1;34m';;
        lightcyan)	color='1;36m';;
        lightgray)	color='37m';;
        lightgreen)	color='1;32m';;
        lightpurple)	color='1;35m';;
        lightred)	color='1;31m';;
        purple)		color='35m';;
        red)		color='1;31m';;
        white)		color='1;37m';;
        yellow)		color='1;33m';;
	*)		return;;
	esac

	[ "${underline}" == "true" ] && color='4;'${color}	
	echo "\e[${color}${text}\e[00m"
}

IF=eth1
IP=$(ifconfig | sed -n "/${IF}/,/^$/{/inet addr/p}" | sed "s/.*inet addr://;s/ Bcast.*//")
echo -e          `color green "System IP"`"  $IP"
echo -e `color red --------------------------------------------------------------------------------------------`
echo


columnc=(green	white	red	white	red	white	white	white	white)
justify=(l	r	r	r	r	r	r	r	r)
columns=(10	2	10	10	10	10	10	10	7)
while read line; do
	column=0
	for word in `echo $line`; do
		# Modify data here		
		[ -n "`echo $word | sed -n '/kb/p'`" ]		&& word=${word//kb/Kb }
		[ -n "`echo $word | sed -n '/[0-9]\{3,\}/p'`" ]	&& word=`printf "%'d\n" $word`
		# Don't modify code below, this prints columns
		case ${justify[$column]} in
			l)	echo -ne `color ${columnc[$column]} ${word}`"${whitesp:0:${columns[$column]}-${#word}}";;
			r)	echo -ne "${whitesp:0:${columns[$column]}-${#word}}"`color ${columnc[$column]} ${word}`;;
		esac
		echo -n " "
		let column++
	done
	echo
done < <(sar -r 1 1 | grep -vE "Average|Linux|^$")
#	Modify line above to feed "while read"

echo 


columnc=(green  white   red     white   white   white   white   white   red)
justify=(l      r       r       r       r       r       r       r       r)
columns=(10     2       10      10      10      10      10      10      7)
while read line; do
        column=0
        for word in `echo $line`; do
                # Modify data here
                #[ -n "`echo $word | sed -n '/kb/p'`" ]          && word=${word//kb/Kb }
                #[ -n "`echo $word | sed -n '/[0-9]\{3,\}/p'`" ] && word=`printf "%'d\n" $word`
                # Don't modify code below, this prints columns
                case ${justify[$column]} in
                        l)      echo -ne `color ${columnc[$column]} ${word}`"${whitesp:0:${columns[$column]}-${#word}}";;
                        r)      echo -ne "${whitesp:0:${columns[$column]}-${#word}}"`color ${columnc[$column]} ${word}`;;
                esac
                echo -n " "
                let column++
        done
        echo
done < <(sar -P ALL 1 1 | grep -vE "Average|all|^$|Linux")
#       Modify line above to feed "while read"




columnc=(green  white   red     white   white   white   white   white   red)
justify=(l      r       r       r       r       r       r       r       r)
columns=(10     2       10      60      60      60      10      10      7)
while read line; do
        column=0
	#echo -n $line
        for word in `echo $line`; do
                # Modify data here
                #[ -n "`echo $word | sed -n '/kb/p'`" ]          && word=${word//kb/Kb }
                #[ -n "`echo $word | sed -n '/[0-9]\{3,\}/p'`" ] && word=`printf "%'d\n" $word`
                # Don't modify code below, this prints columns
		word=${word//\//I}
		word=${word//%/I}
		echo -ne "  $word"
                case ${justify[$column]} in
                        l)      echo -ne `color ${columnc[$column]} ${word}`"${whitesp:0:${columns[$column]}-${#word}}";;
                        r)      echo -ne "${whitesp:0:${columns[$column]}-${#word}}"`color ${columnc[$column]} ${word}`;;
                esac
                echo -n " "
                let column++
        done
        echo
done < <(ps -o pid,time,pcpu,comm,args -C VirtualBox)
#       Modify line above to feed "while read"






