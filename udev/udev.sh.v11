#!/bin/bash
function main(){
	case "${1}" in
		a*|A*)		shift; ACTION_ADD     "$@";;
		r*|R*)		shift; ACTION_REMOVE  "$@";;
		t*|T*)		shift; ACTION_TRIGGER "$@";;
		sd*)		       ACTION_ADD     "$@";;
		*)      	UMOUNT=false
				STARTVM=false
				ACTION_ADD;;
	esac
}
function HELP(){
	cat <<-HELP
		Usage...
		 a [dev]	run device add
		 r [dev] run device remove
		 t [dev] trigger udev device add action

		 LOG :: ${LOG}
	HELP
	EXIT 1
}
function ACTION_ADD(){
	local DISPLAY_0_USER=$(GET_DISPLAY_0_USER)
	local DISPLAY_0_HOME=$(GET_DISPLAY_0_HOME)
	DEVICE=$(GET_DEVICE_LIST | head -1)
	DEVICE=${1:-${DEVICE}}

	# filter out root; system drive
	IS_DEVICE_ROOT # function exits if positive

	# Set GLOBAL VARS
	GET_DEVICE_DETAIL &>/dev/null

	# popup log
	OPEN_POPUP_LOG

	# prompt user to choose tool or disregard
	IFS=: SELECTION=( $(zenity_choose_tool) )

	# exit if user chose cancel or closed dialog
	(( ${SELECTION[0]} == 1 )) \
		&& { echo CANCELED :: Task selection dialog for disk \"${DEVICE}\". Exiting\!; EXIT 1; }
	(( ${SELECTION[0]} != 5 )) \
		&& { echo NEWSTATE :: Task selection dialog returned ${SELECTION[0]}. Exiting\!; EXIT 1; } \
		|| (( ${#SELECTION[*]} > 1 )) \
			&& echo SELECTED :: ${SELECTION[*]} \
			|| echo TIME_OUT :: Task selection dialog timed out\!

	# set default if next was selected without chooseing a tool
	(( ${#SELECTION[*]} > 1 )) && GET_SELECTION_DETAILS || SET_DEFAULT_SELECTION

	# prompt user to add seconadary device 
	if echo ${SELECTION[2]} | grep -qi "^diag"; then
		DEVICE[1]=$(zenity_choose_second)
	fi

	# prompt user to label task/vm
	IFS=: NAME=( $(zenity_name_task) )

	# exit if user chose cancel or closed dialog
	(( ${NAME[0]} == 1 )) \
		&& { echo CANCELED :: Task naming dialog for disk \"${DEVICE}\". Exiting\!; EXIT 1; }
	(( ${NAME[0]} != 5 )) \
		&& { echo NEWSTATE :: Task naming dialog returned ${NAME[0]}. Exiting\!; EXIT 1; } \
		|| (( ${#NAME[*]} > 1 )) \
			&& echo LAUNCHED :: Name - ${NAME[*]} \
			|| echo TIME_OUT :: Task naming dialog timed out\!


	# set default name if start vm was selected without entering a name
	(( ${#NAME[*]} > 1 )) || SET_DEFAULT_NAME

######### if selection wat PXE then verify bridged ethernet default is OK


	# amend VRDEPORT and DEVICE to NAME[1]
	NAME[1]="${NAME[1]}-$(GET_VRDEPORT).${DEVICE}"

	# set path for vmdk files
	declare -A VMDK
	for DEV in ${DEVICE[*]}; do
		VMDK[${DEV}]="${DISPLAY_0_HOME}/.VirtualBox/udev.${DEV}.${NAME[1]}.vmdk"
	done

	# cleanup old primary vmdk files
	local TARGET_VM_MASK=""
	for DEV in ${DEVICE[*]}; do
		DETACH_VMDK_HDD ${DEV}
	done

	# cleanup conflicting stale virtual machines
	for DEV in ${DEVICE[*]}; do
		DELETE_VM ${DEV}
	done

	# unmount devices
	local TRIES=""
	local PART=""
	for DEV in ${DEVICE[*]}; do
		for PART in `ls /dev/${DEV}[0-9]`; do
			for TRIES in {1..2}; do
				umount ${PART} &>/dev/null
			done
			umount -v ${PART}
		done
	done

	# create virtualbox raw vmdk files
	for DEV in ${DEVICE[*]}; do
		which VBoxManage &>/dev/null || continue
		VBoxManage internalcommands createrawvmdk	\
			-filename "${VMDK[${DEV}]}"		\
			-rawdisk /dev/${DEV}
		chmod a+rw                        "${VMDK[${DEV}]}"
		chown ${DISPLAY_0_USER}.vboxusers "${VMDK[${DEV}]}"
		chmod a+rw                        /dev/${DEV}
		chown ${DISPLAY_0_USER}.vboxusers /dev/${DEV}
	done

	# create virtual machine
	SET_VM	

	# start virtual machine
	START_VM

	# dump var status to LOG
	echo	
	echo "      name :: "${NAME[*]}
	echo "  name err :: "${NAME[0]}
	echo " selection :: "${SELECTION[*]}
	echo "select err :: "${SELECTION[0]}
	echo "      path :: "$(GET_SELECTION_PATH)
	echo "       mem :: "$(GET_SELECTION_MEM)
	echo "      name :: "${NAME[1]}
	echo '        $@ :: '$@
	echo
}
function ACTION_REMOVE(){
	unset POPUP_LOG


}
function ACTION_TRIGGER(){
	#udevadm trigger --action=add    --sysname-match="sdb"
	local DEV=$(GET_DEVICE_LIST | head -1)
	local DEV=${2:-${DEV}}
	unset POPUP_LOG

	IS_DEVICE_ROOT ${DEV}
	
	IS_DEVICE_REAL ${DEV}

	case "$1" in
		a*|A*)	udevadm trigger --action=add    --sysname-match="${DEV}";;
		r*|R*)	udevadm trigger --action=remove --sysname-match="${DEV}";;
		*)	ACTION_TRIGGER add "$@";;
	esac
}
function IS_DEVICE_ROOT(){
	local DEV=${1:-${DEVICE}}
	if GET_ROOT_DEVICE | grep -q "^${DEV}$"; then
		echo ERROR :: ${FUNCNAME} :: Device \"${DEV}\" is host system ROOT disk.  Exiting\!
		EXIT 1
	fi
}
function IS_DEVICE_REAL(){
	local DEV=${DEVICE:-$1}
	local DEV=${1:-${DEV}}
	if ! GET_DEVICE_LIST | grep -q "^${DEV}$"; then
		echo ERROR :: ${FUNCNAME} :: Device \"${DEV}\" is not real or not attached. Exiting\!
		EXIT 1
	fi
}
function GET_ROOT_DEVICE(){
	#awk '/[[:space:]]\/[[:space:]]/{print $1}' /etc/mtab |\
	awk '/ \/ /{print $1}' /etc/mtab |\
	xargs basename |\
	tr -d '0-9' |\
	grep ""
	if (( $? > 0 )); then
		echo ERROR :: ${FUNCNAME} :: Could not determine host system ROOT disk. Exiting\!
		EXIT 1
	fi
}
function GET_DEVICE_LIST(){
	local ROOT=$(GET_ROOT_DEVICE)
	ls -1 /dev/sd[a-z] |\
	awk -F/ -v ROOT=${ROOT} '$3!=ROOT{print $3}' |\
	grep ""
	if (( $? > 0 )); then
		echo ERROR :: ${FUNCNAME} :: No attached non-root devices. Exiting\!
		EXIT 1
	fi
}
function START_VM(){
	local DISPLAY_0_USER=$(GET_DISPLAY_0_USER)

	local VB=$(which VirtualBox 2>/dev/null)
	if [ -z "${VB}" ]; then
		echo ERROR :: ${FUNCNAME} :: VirtualBox not found. Skipping\! >> "${LOG}"
		return
	fi

	# start vm
	cat <<-SU | su - ${DISPLAY_0_USER} -s /bin/bash
		export DISPLAY=:0
		${VB} --startvm ${NAME[1]} &
	SU
}
function DETACH_VMDK_HDD(){
	local DISPLAY_0_USER=$(GET_DISPLAY_0_USER)
	local DEV=${1:-${DEVICE}}
	local TARGET_VM_MASK="$(GET_VRDEPORT ${DEV}).${DEV}.vmdk"
	cat <<-SU | su - ${DISPLAY_0_USER} -s /bin/bash
		# Only run command if VBoxManage exists and is in PATH
		which VBoxManage &>/dev/null &&\
		VBoxManage list hdds |\
		while read VAR DATA; do
			(( \${#VAR} )) || continue
			# create variables
			eval \${VAR%:}=\"\${DATA}\"
			# If the following are true...
			# Usage is the current VAR (also the last hdd detail)
			# Format equals VMDK
			# The Location name matches my mask
			if [ "\${VAR%:}" == "Usage" ] \
			&& [ "\${Format}" == "VMDK" ] \
			&& [[ "\${Location}" =~ ${TARGET_VM_MASK}\$ ]]; then
				echo DEL_DISK :: UUID = \${UUID}
				echo DEL_DISK :: PATH = \${Location}
				VBoxManage controlvm     "\${Usage% (*}" poweroff
				(( \$? )) || sleep 3
				VBoxManage storageattach "\${Usage% (*}"\
					--storagectl ${SCTL}		\
					--type hdd --port 0 --device 0	\
					--medium none
				(( \$? )) || sleep 2
				VBoxManage storageattach "\${Usage% (*}"\
					--storagectl ${SCTL}		\
					--type hdd --port 1 --device 0	\
					--medium none
				(( \$? )) || sleep 2
				VBoxManage closemedium disk "\${UUID}"
				(( \$? )) || sleep 2
				VBoxManage unregistervm "\${Usage% (*}" --delete
				(( \$? )) || sleep 2 
				VBoxManage unregistervm "\${Usage% (*}"
				(( \$? )) || sleep 2 
			fi
		done		
	SU
	# now remove the actual vmdk file
	rm -f "${DISPLAY_0_HOME}/.VirtualBox/udev.${DEV}."*.vmdk
}
function DELETE_VM(){
	local DISPLAY_0_USER=$(GET_DISPLAY_0_USER)
	local DEV=${1:-${DEVICE}}
	local TARGET_VM_MASK="$(GET_VRDEPORT ${DEV}).${DEV}"
	cat <<-SU | su - ${DISPLAY_0_USER} -s /bin/bash
		# Only run command if VBoxManage exists and is in PATH
		which VBoxManage &>/dev/null &&\
		VBoxManage list vms |\
		while read line; do
			eval words=( "\${line}" )
			vm_uuid=\${words[1]}
			echo MACHINE :: \${words[*]}
			if [[ "\${words[0]}" =~ ${TARGET_VM_MASK}\$ ]]; then
				echo REMOVED :: \${words[*]}
				VBoxManage controlvm    \${vm_uuid} poweroff
				(( \$? )) || sleep 3
				VBoxManage unregistervm \${vm_uuid} --delete
				(( \$? )) || sleep 3
				VBoxManage unregistervm \${vm_uuid}
				(( \$? )) || sleep 3
			fi
		done
	SU
	# remove vm folder
	rm -rf "${DISPLAY_0_HOME}/VirtualBox VMs"/*${TARGET_VM_MASK}
}
function SET_VM(){
	local DISPLAY_0_USER=$(GET_DISPLAY_0_USER)
	local DISPLAY_0_HOME=$(GET_DISPLAY_0_HOME)
	local DISPLAY_0_TOOL_DIR="${DISPLAY_0_HOME}/${TOOL_DIR}"
	
	local VBM=$(which VBoxManage 2>/dev/null)
	if [ -z "${VBM}" ]; then
		echo ERROR :: ${FUNCNAME} :: VBoxManage not found. Skipping\! >> "${LOG}"
		return
	fi
	# prep
	case ${SELECTION[1]} in
		-)	local boot1='net';;
		0)	local boot1='disk';;
		*)	local boot1='dvd'
			local DVD=$(GET_SELECTION_PATH);;
	esac
	# create vm
	cat <<-SU | su - ${DISPLAY_0_USER} -s /bin/bash
		${VBM} createvm --name ${NAME[1]}	\
				--ostype Other		\
				--register
	SU
	# memory
	cat <<-SU | su - ${DISPLAY_0_USER} -s /bin/bash
		${VBM} modifyvm ${NAME[1]} --memory $(GET_SELECTION_MEM)
	SU
	# set boot device
	cat <<-SU | su - ${DISPLAY_0_USER} -s /bin/bash
		${VBM} modifyvm ${NAME[1]} --boot1 ${boot1} \
					   --boot2 none     \
					   --boot3 none     \
					   --boot4 none
	SU
	# set nic
	cat <<-SU | su - ${DISPLAY_0_USER} -s /bin/bash
		${VBM} modifyvm ${NAME[1]} --nic1 bridged        \
					   --cableconnected1 on  \
					   --bridgeadapter1 ${BRIDGED_ETH} \
					   --nictype1 82540EM    \
					   --macaddress1 $(GET_MAC)
	SU
	# set VRDE
	cat <<-SU | su - ${DISPLAY_0_USER} -s /bin/bash
		${VBM} modifyvm ${NAME[1]} --vrde on                  \
					   --vrdeport $(GET_VRDEPORT) \
					   --vrdeauthtype null        \
					   --vrdemulticon on
	SU
	# set ide controler and dvd
	cat <<-SU | su - ${DISPLAY_0_USER} -s /bin/bash
		${VBM} storagectl ${NAME[1]} --name ${SCTL}	\
					   --add ${SCTL}	\
					   --bootable on
		${VBM} storageattach ${NAME[1]} --storagectl ${SCTL} \
					   --port 0		\
					   --device 1		\
					   --type dvddrive	\
					   --medium "${DVD:-emptydrive}"
	SU
	# set disks
	for dev in ${DEVICE[*]}; do
	cat <<-SU | su - ${DISPLAY_0_USER} -s /bin/bash
		${VBM} storageattach ${NAME[1]} --storagectl ${SCTL}	\
					   --port $(( index++ ))\
					   --device 0		\
					   --type hdd		\
					   --medium "${VMDK[${DEV}]}"
	SU
	done
}
function GET_VRDEPORT(){
	# dependant on global variables; VRDEPORT, DEVICE
	local DEV=${1:-${DEVICE}}
	# get vrdeport; convert the sd disk letter to a number and add to port base
	# sdb = 33890, sdc = 33891, sdd = 33892,,,
	echo $(( VRDEPORT + $(printf "%d\n" \'${DEV:2}) - 98 ))
}
function GET_MAC(){
	# dependant on global variables; MAC
	local DEV=${1:-${DEVICE}}
	# get mac; convert the sd disk letter to a number and add to mac base
	# sdb = 99, sdc = 98, sdd = 97,,,
	echo ${MAC}$(( 197 - $(printf "%d\n" \'${DEV:2}) ))
}
function zenity_name_task(){
	# dependant on global variables; DEVICE
	local DISPLAY_0_USER=$(GET_DISPLAY_0_USER)
	# get drive size
	local zenityTitle=$(GET_DEVICE_DETAIL)
	# naming instructions
	local zenityText=$(GET_CONFIG_SECTION "${NAMING_INSTRUCTIONS}")

	(
	cat <<-ZENITY | su - ${DISPLAY_0_USER} -s /bin/bash 2>/dev/null
		DISPLAY=${DISPLAY} zenity		\
			--timeout=${DIALOG_TIMEOUT:-25}	\
			--ok-label="START VM"		\
			--cancel-label="CANCEL"		\
			--title="${zenityTitle// /   }"	\
			--text="${zenityText}"		\
			--entry
		ZENITY
	echo $?:
	) | tac | tr -d '\n'
}
function zenity_choose_second(){
	echo
}
function GET_DEVICE_DETAIL(){
	# dependant on global variables; DEVICE_DETAIL, DEVICE
	local DEV=${1:-${DEVICE}}

	IS_DEVICE_REAL ${DEV}

	declare -A DEVICE_DETAIL

	if [ -z "${DEVICE_DETAIL[${DEV}]}" ];then
		DEVICE_DETAIL[${DEV}]=$(fdisk -l /dev/${DEV} |\
			sed -n "\|^Disk[[:space:]]\+/dev/${DEV}:[[:space:]]|p" |\
			cut -d, -f1)
	fi	
	echo ${DEVICE_DETAIL[${DEV}]} |\
	tee -a >(${DEBUG} && xargs echo ${FUNCNAME} :: >> "${LOG}") |\
	grep ""
	(( $? > 0 )) && { echo ERROR \"${FUNCNAME}\" >> "${LOG}"; EXIT 1; }
}
function GET_SELECTION_DETAILS(){
	# dependant on global variables; SELECTION
	local LINE=""
	while read LINE; do
                eval IFS=${DIFS} SELECTION=( ${SELECTION[0]} "${LINE}" )
	done < <(GET_SELECTIONS | sed "/^[[:space:]]*${SELECTION[1]}[[:space:]]/!d")
}
function GET_DEFAULT_SELECTION(){
	echo - PXE  DEFAULT      none 512
	echo 0 DISK EXPERIMENTAl none 512
}
function SET_DEFAULT_SELECTION(){
	# dependant on global variables; SELECTION
	IFS=$DIFS SELECTION=( ${SELECTION[0]} $(GET_DEFAULT_SELECTION) )
	IFS=$DIFS SELECTION=( ${SELECTION[*]:0:6} )
}
function SET_DEFAULT_NAME(){
	# dependant on global variables; NAME
	IFS=$DIFS NAME=( ${NAME[0]} $(GET_DEVICE_DETAIL) )
	IFS=$DIFS NAME=( ${NAME[0]} "${NAME[3]}${NAME[4]}" )
}
function zenity_choose_tool(){
	# dependant on global variables; DEVICE
	local DISPLAY_0_USER=$(GET_DISPLAY_0_USER)
	
	# get drive size
	local zenityTitle=$(GET_DEVICE_DETAIL)

	# get selection instructions
	local zenityText=$(GET_CONFIG_SECTION "${TOOL_INSTRUCTIONS}")

	# get column headers
	eval local column=( $(GET_CONFIG_SECTION "${CONFIG_COLUMN_HEADERS}") )

	(
	cat <<-ZENITY | su - ${DISPLAY_0_USER} -s /bin/bash 2>/dev/null
		DISPLAY=${DISPLAY} zenity		\
			--width=250			\
			--height=400			\
			--timeout=${DIALOG_TIMEOUT:-25}	\
			--ok-label="NEXT"		\
			--cancel-label="CANCEL"		\
			--title="${zenityTitle// /   }"	\
			--text="${zenityText}"		\
			--list				\
			--print-column=ALL		\
			--separator=:			\
			--column "#"			\
			--column "${column[0]}"		\
			--column "${column[1]}"		\
			$(zenity_selection_list)
		ZENITY
	echo $?:
	) | tac | tr -d '\n'
}
function zenity_selection_list(){
	GET_SELECTIONS |\
	while read LINE; do
		eval ARGS=( ${LINE} )
		echo -n ${ARGS[0]} \"${ARGS[1]}\" \"${ARGS[2]}\" ""
	done
}
function GET_SELECTIONS(){
	# dependant on global variables; CONFIG_TOOL_SELECTIONS
	GET_DEFAULT_SELECTION
	GET_CONFIG_SECTION "${TOOL_SELECTIONS}" | cat -n
}
function GET_CONFIG_SECTION(){
	# dependant on global variables; USER_TOOL_LIST_PATH
	local DISPLAY_0_HOME=$(GET_DISPLAY_0_HOME)
	local SECTION=$1
	#echo ${DISPLAY_0_HOME} ${SECTION} | LOG
	cat <<-SED | sed -n -f <(cat) "${DISPLAY_0_HOME}/${USER_TOOL_LIST_PATH}"
		/[[:space:]]*\[ ${SECTION} \]/,/[[:space:]]*\[/{
			/[[:space:]]*\[/d	# delete first and last line
			/^$/d			# delete empty lines
			/^[[:space:]]*#/d	# delete comment lines
			s/^\t//			# remove single leading tab char
			p			# print
		}
	SED
}
function GET_SELECTION_PATH(){
	# dependant on global variables; SELECTION
	local DISPLAY_0_HOME=$(GET_DISPLAY_0_HOME)
	local DISPLAY_0_TOOL_DIR="${DISPLAY_0_HOME}/${TOOL_DIR}"
	local ISO=${SELECTION[4]}
	if [[ "${ISO}" =~ ^\/ ]]; then
		if [ ! -f "${ISO}" ]; then
			if [ -f "${DISPLAY_0_TOOL_DIR}${ISO}" ]; then
				local ISO="${DISPLAY_0_TOOL_DIR}${ISO}"
			elif [ -f "${DISPLAY_0_HOME}${ISO}" ]; then
				local ISO="${DISPLAY_0_HOME}${ISO}"
			else
				unset ISO
			fi
		fi
	else
		if [ -f "${DISPLAY_0_TOOL_DIR}/${ISO}" ]; then
			local ISO="${DISPLAY_0_TOOL_DIR}/${ISO}"
		elif [ -f "${DISPLAY_0_HOME}/${ISO}" ]; then
			local ISO="${DISPLAY_0_HOME}/${ISO}"
		else
			unset ISO
		fi
	fi
	echo ${ISO}
}
function GET_SELECTION_MEM(){
	# dependant on global variables; SELECTION
	echo ${SELECTION[5]} | sed 's/^$/128/'
}
function GET_DISPLAY_0_USER(){
	# get user logged into disaply ${DISPLAY}, DEFAULTS to :0
	echo localcosadmin
	return
	who -u |\
	awk '/ tty[0-9].* \(:0\)/{print $1}' |\
	tee -a >(${DEBUG} && xargs echo ${FUNCNAME} :: >> "${LOG}") |\
	grep ""
	(( $? > 0 )) && { echo ERROR \"${FUNCNAME}\" >> "${LOG}"; EXIT 1; }
}
function GET_DISPLAY_0_HOME(){
	local DISPLAY_0_USER=$(GET_DISPLAY_0_USER)
	awk -F: -v USER=${DISPLAY_0_USER} '$1~"^"USER"$"{print $6}' /etc/passwd |\
	tee -a >(${DEBUG} && xargs echo ${FUNCNAME} :: >> "${LOG}") |\
	grep ""
	(( $? > 0 )) && { echo ERROR \"${FUNCNAME}\" >> "${LOG}"; EXIT 1; }
}
function SOURCE_CONFIG_GLOBAL_VARS(){
	if [ -f "${BASH_SRCDIR}/${1}" ]; then
		local config="${BASH_SRCDIR}/${1}"
	elif [ -f "${1}" ]; then
		local config=$1
	elif [ "${1}" == "/dev/fd/63" ]; then
		local config=$1
	else
		echo ERROR :: ${FUNCNAME} :: File \"$1\" not found. >> "${LOG}"
		return
	fi
	#cat "${config}" >> "${LOG}"
	source <(sed -n "${config}" -f <(cat <<-SED
		/^[[:space:]]*$/d				# delete blank lines
		/^[[:space:]]*#/d				# delete comment lines
		/^[[:space:][:alnum:]\"\'=_]*$/{		# ensure no command execution
			s/[\"\']//g				# remove punctuation
			s/[[:space:]]*=[[:space:]]*/=\"/	# ammend quotes to =
			s/[[:space:]]*$/\"/			# ammend quotes to $
			s/[[:space:]]\+/ /g			# remove tabs, reduce spaces
			p					# print
		}
	SED
	))
}
function LOG(){
	local LOG_="${BASH_SRCDIR}"/$(basename "${BASH_SRCNAME}" .sh).log
	local LOG_=${LOG:-${LOG_}}
	(( ${#@} > 0 )) && echo "$@" >> "${LOG_}"
	read -t 0 -N 0 && cat >> "${LOG_}" 2>&1
	echo ${FUNCNAME} >> "${LOG_}"
}
function OPEN_POPUP_LOG(){
	${POPUP_LOG:-false} || return
	local LOG_="${BASH_SRCDIR}"/$(basename "${BASH_SRCNAME}" .sh).log
	local LOG_=${LOG:-${LOG_}}
	local DISPLAY_0_USER=$(GET_DISPLAY_0_USER)
	cat <<-SU | su - ${DISPLAY_0_USER} -s /bin/bash &
		DISPLAY=${DISPLAY} terminator		\
			-m -b				\
			-T "$(GET_DEVICE_DETAIL)"	\
			-e "tail -f \"${LOG_}\""
	SU
	POPUP_LOG_PID=$!
	sleep 2
	POPUP_LOG_PID=$(FIND_PID ${POPUP_LOG_PID} tail)
	echo INFO :: ${FUNCNAME} :: PID = ${POPUP_LOG_PID} >> "${LOG}"
}
function FIND_PID(){
	local ppid=$1
	local cmd=$2
	local pid=""
	ps --no-heading -o pid --ppid ${ppid} &>/dev/null || return 0
	# test child pids for command match
	# ps --no-heading -fp ${ppid} >> "${LOG}"
	while read pid; do
		if ps --no-heading -o cmd -p ${pid} | grep -q "^${cmd}"; then
			echo ${pid}
			return 0
		fi
	done < <(ps --no-heading -o pid --ppid ${ppid})
	# if no command match found then process children 
	while read pid; do
		${FUNCNAME} ${pid} ${cmd}
	done < <(ps --no-heading -o pid --ppid ${ppid})
}
function EXIT(){
	# cleanup
	rm -rf "${TMP}"
	rm -rf "${SHM}"
	if ${POPUP_LOG:-false}; then
		echo INFO :: ${FUNCNAME} :: POPUP_LOG_PID = ${POPUP_LOG_PID} >> "${LOG}"
		eval "sleep ${POPUP_LOG_AUTOCLOSE_DELAY}; kill ${POPUP_LOG_PID};"
	fi
	exit ${1:- 0}
}

function canonicalpath(){
	if [ -d $1 ]; then
		pushd $1 > /dev/null 2>&1
		echo $PWD
	elif [ -f $1 ]; then
		pushd $(dirname $1) > /dev/null 2>&1
		echo $PWD/$(basename $1)
	else
		echo "Invalid path $1"
	fi
	popd > /dev/null 2>&1
}
# GLOBAL vars; fully qualified script paths and names
BASH_SRCFQFN=$(canonicalpath "${BASH_SOURCE}")
BASH_SRCNAME=$(basename "${BASH_SRCFQFN}")
BASH_SRCDIR=$(dirname "${BASH_SRCFQFN}")

# GLOBAL vars; source config file
SOURCE_CONFIG_GLOBAL_VARS "config"

# GLOBAL vars; Config file section headers
TOOL_COLUMN_HEADERS=${TOOL_COLUMN_HEADERS:-Task List Column Headers}
TOOL_SELECTIONS=${TOOL_SELECTIONS:-Task List Selections}
TOOL_INSTRUCTIONS=${TOOL_INSTRUCTIONS:-Task Selection Instructions}
NAMING_INSTRUCTIONS=${NAMING_INSTRUCTIONS:-Naming Instructions}
GLOBAL_DEFAULTS=${GLOBAL_DEFAULTS:-Global Defaults}

# User Task Managment Folder
USER_TOOL_DIR=${USER_TOOL_DIR:-ISO}
TOOl_LIST_FILE_NAME=${TOOl_LIST_FILE_NAME:-tool.list.txt}
USER_TOOL_LIST_PATH=${USER_TOOL_DIR}/${TOOl_LIST_FILE_NAME}
cat <<-SU | su - $(GET_DISPLAY_0_USER) -s /bin/bash
	mkdir -p ~/"${USER_TOOL_DIR}"
	touch ~/"${USER_TOOL_LIST_PATH}" 2>/dev/null
SU

# GLOBAL vars; LOG
LOG="${BASH_SRCDIR}"/$(basename "${BASH_SRCNAME}" .sh).log
chmod 777 "${LOG}"

# GLOBAL vars; source user config file
SOURCE_CONFIG_GLOBAL_VARS <(GET_CONFIG_SECTION "${GLOBAL_DEFAULTS}")
#GET_CONFIG_SECTION "${GLOBAL_DEFAULTS}" >> "${LOG}" 2>&1

# GLOBAL vars; mac address base, vrdeport base, DIALOG_TIMEOUT
MAC=${MAC:-080027ABCD}
MAC=${MAC//:/}
MAC=${MAC:0:10}
VRDEPORT=${VRDEPORT:-33890}
DIALOG_TIMEOUT=${DIALOG_TIMEOUT:-25}
BRIDGED_ETH=${BRIDGED_ETH:-eth0}

# GLOBAL vars; VirtualBox
SCTL='ide'

# GLOBAL vars; TMP
TMP="/tmp/$$_${BASH_SRCNAME}_$$"
mkdir "${TMP}"
SHM="/dev/shm/$$_${BASH_SRCNAME}_$$"
mkdir    "${SHM}"
chmod +t "${SHM}"


# GLOBAL vars; DIFS = default array delimiter
DIFS=${IFS}

# GLOBAL vars; DEBUG
DEBUG=${DEBUG:-false}

# GLOBAL vars; DISPLAY
DISPLAY=:0
#DISPLAY=:12

# Source git repo sudirectory
#http='https://raw.github.com/michaelsalisbury/builder/master/udev'

# Project NAME
#NAME='x11vnc'

# Get details of the latest version
#latest=`wget -O - -o /dev/null "${http}/LATEST.TXT"`

# GLOGAL vars; POPUP_LOG, POPUP_LOG_AUTOCLOSE_DELAY
POPUP_LOG=${POPUP_LOG:-false}
POPUP_LOG_AUTOCLOSE_DELAY=${POPUP_LOG_AUTOCLOSE_DELAY:-60}

# Display Help
[[ "$1" =~ ^(-h|--help)$ ]] && HELP

# main
main "$@" >> "${LOG}" 2>&1

EXIT

# simulation control
#
# trigger add and remove
#   udevadm trigger --action=remove --sysname-match="sdb"
#   udevadm trigger --action=add    --sysname-match="sdb"
#
# force re-read of linked udev rules
#   stop udev; sleep 1; start udev



