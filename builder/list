#!/bin/bash

declare -A includes


function list_main(){

	include_file test.sh
	#typeset -f | sed -e "/^{/,/^}/d" -e "s/[[:space:]].*//" | grep "^import$"
	typeset -f | sed -e "/^{/,/^}/d" -e "s/[[:space:]].*//"
}
function include_file(){
	local include_file=$(readlink -nf "$1")
	local include_path=$(dirname "${include_file}")

	if ${includes[${include_file}]:-false}; then
		echo Include file \"${include_file}\" has already been processed. 1>&2
		continue
	else
		includes[${include_file}]=true
	fi
	if sed "${include_file}" -e '1p;d' | grep -q "^#!/bin/builder"; then
		echo BUILDER :: ${include_file}
		# Parse functions to be sourced to ensure no duplicates
		include_functions "${include_file}"

		# Parse global variables
		include_variables "${include_file}"	
 
		# Parse includes
		#include_dependencies "${include_file}"


	elif sed "${include_file}" -e '1p;d' | grep -q "^#!/bin/bash"; then
		echo ___BASH :: ${include_file}
		#source "${include_file}"
	else
		echo ___FILE :: ${include_file}
		#source "${include_file}"
	fi

}
function include_variables(){
	local include_file=$(readlink -nf "$1")
	local include_path=$(dirname "${include_file}")
	local variable_name=""
	local variable_is_available=""
	# Parse all variable to ensure they have not been used
	while read variable_name; do
		echo $variable_name
		variable_is_available=${!variable_name:+false}
		if ${variable_is_available:-true}; then
			echo variable_name :: $variable_name 1>&2
		else
			echo variable_name :: $variable_name ALREADY TAKEN 1>&2
		fi
	done < <(include_function "${include_file}" global_variables |\
		    sed -e '1d;$d'\
			-e 's/[[:space:]]*//'\
			-e '/.*read.*</s/.*read.*[[:space:]]\+\([a-Z0-9_]\+\)[[:space:]]\+<.*/\1/p'\
			-e '/^declare/s/.*[[:space:]]\+\([a-Z0-9_]\+\)\($\|=.*\)/\1/p'\
			-e '/^IFS[a-Z0-9_]*=/d'\
			-e '/[^[:space:]]\+=/s/=.*//p'\
			-e 'd')
}



function include_function(){
	local include_file=$(readlink -nf "$1")
	local function_name=$2
	sed "${include_file}" -n -e "/^[[:space:]]*function[[:space:]]\+${function_name}[[:space:]]*()/,/^}/p"
}

function include_functions(){
	local include_file=$(readlink -nf "$1")
	local include_path=$(dirname "${include_file}")
	local function_name=""

	while read function_name; do
		# verify function name is unique 
		if typeset -f | sed -e "/^{/,/^}/d" -e "s/[[:space:]].*//" | grep -q "^${function_name}$"; then
			if [ "${function_name}" == "main" ]; then
				echo WARNING :: File \"${include_file}\" sourced function \"${function_name}\", but will be ignored. 1>&2
			else	
				echo _ERROR_ :: File \"${include_file}\" needs to re-name function \"${function_name}\", ignoring. 1>&2
			fi
			continue
		fi
		# source function
		source <(include_function "${include_file}" ${function_name})
		# verify function has been sourced
		if typeset -f | sed -e "/^{/,/^}/d" -e "s/[[:space:]].*//" | grep -q "^${function_name}$"; then
			echo SUCCESS :: File \"${include_file}\" sourced function \"${function_name}\". 1>&2
		else
			echo _ERROR_ :: File \"${include_file}\" sourced function \"${function_name}\" but verification failed. 1>&2
		fi
	### LOOP A ##########################################################################################################
	done < <(sed "${include_file}"\
			-e "/^[[:space:]]*function[[:space:]]\+[^()[:space:]]\+[[:space:]]*()/!d"\
			-e "s/^[[:space:]]*function[[:space:]]\+\([^()[:space:]]\+\).*/\1/"\
			-e "/^includes$/d"\
			-e "/^global_variables$/d"
		)
}
function import(){
	local scriptFQFN=$(readlink -nf "$1")
	local scriptPATH=$(dirname "${scriptFQFN}")
	# define loop variables as local
	local include_line=""
	local include_file=""
	local function_name=""
	### LOOP A ### parse the passed script file for a function called "includes"
	while read include_line; do
		# escape all spaces in include line; this keeps include entries clean and free of quotes
		include_line=${include_line// /\"\ \"}
		# if the include line does not start with a leading slash then it's relative to the location of the passed script file
		if [ "${include_line:0:1}" != "/" ]; then
			include_line=${scriptPATH}/${include_line}
		fi
		### LOOP B ### use the find command to expand the include line and list all the matching files
		while read include_file; do
			if [ -f "${include_file}" ]; then
				# verify that the file to be sourced has not already been processed
				if ${includes[${include_file}]:-false}; then
					echo Include file \"${include_file}\" has already been processed. 1>&2
					continue
				else
					includes[${include_file}]=true
				fi
				if sed "${include_file}" -e '1p;d' | grep -q "^#!/bin/builder"; then
					### LOOP C ### Parse functions to be sourced to ensure no duplicates
					while read function_name; do
						echo $function_name


					### LOOP C ##########################################################################################################
					done < <(sed "${include_file}" -n -e "s/^[[:space:]]*function[[:space:]]\+\([^()[:space:]]\+\).*/\1/p")
					#sed "${include_file}" 	
					echo BUILDER :: ${include_file}
				elif sed "${include_file}" -e '1p;d' | grep -q "^#!/bin/bash"; then
					echo ___BASH :: ${include_file}
				else
					echo ___FILE :: ${include_file}
				fi
			else
				echo ___COLD :: ${include_file}
			fi
		### LOOP B ##########################################################################################################
		done < <(eval find "${include_line}" -type f -maxdepth 0 2> /dev/null)
	### LOOP A ##########################################################################################################
	done < <(sed "${scriptFQFN}" -e '/^function includes/,/^}/p;d' | sed '1d;$d')
}
list_main "$@"
